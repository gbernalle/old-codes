/*RESET_ Navegador trás CSS padrão, deve-se fazer o reset para tirar esse CSS */

*{ /* RESET*/
    margin: 0;
    padding: 0;
    border: none;
    text-decoration: none;
    box-sizing: border-box;
}

html{
    --black:#0D114F;
    --white:#FAFAFA;
    --red:#E83F5B;
    --light-blue:#E0ECFF;
    --blue:#3485FF;
    --background:#FBFCFF;
    --overlay:#040911;
    --icons-details:#A5B0C1;
    
    --grey-dark:#4D5E77;
    --grey-blue:#A1B2CD;
    --grey-medium:#e5eaf2;
    --grey-light:#E5EAF1;

/*Pixels é forçado, para ser responsivo usar o REM=16px (User Agent = pré CSS pronto do navegador) */
    font-size: 62.5%; /*Forçar o User Agent a ser 10px ao invés de 16px | Conta realizada através da regra de 3*/
}
/*
    h2{
        /*Divisão agora passa a ser por 10 e não mais por 16, fazendo com que achemos o rem mais fácil  */
/*      font-size: 2.8rem;
    } 
Teste para mostrar porque o REM salva seu tempo 

 --> USE REM <--
*/

body{ /* vh = View Height = a gente está falando para ele pegar o total da tela => Onde inicia e Onde termina (Abaixo da aba e do pesquisar do browser)  */
   /*Estamos usando o vh pois não teremos barra de rolagem*/
    display: flex; 
    height:100vh;
    background: var(--background);
}

/*vw = View Width = mesma linha de raciocínio do vh, mas é de largura
width: 100vw; -->Apenas teste para mostrar que existe<--*/

/* clamp() => Intervalo de tamanho */

body, button, input, textarea{ /*RESET*/
/*Não colocamos dentro do body, pois ele não engloba o input, botton e textarea*/
    font-size: clamp(14px, 1.6rem,2vw);
/* o mínimo que a letra chega é 14px, o padrão é 1.6rem e o max 2vw*/
    font-family: 'Open Sans', sans-serif;
    /* font-family: 'Poppins', sans-serif; */
}
/*BOA PRÁTICA => Quando a fonte existe no goolge fonts selecionar só a que for usar, isso deixa a aplicação menos pesada*/ 

.content{  /* Conteúdo */
    width: 100%;
    margin: 0 auto;
}


.sr-only{
    /*  O problema de usar o display none, é que ele não esconde, de fato deixa de existir
    display: none; */

    position: absolute;
    height: 1px;
    width: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip-path: rect(0,0,0,0);
    white-space: nowrap;
    border-width: 0;

}
/* Código abaixo remove a barra de rolagem do input, só o overflow não resolveu */
input[type=number]::-webkit-inner-spin-button,

input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
}

/* INPUT and BUTTONS */
input, button, .button{
    border-radius: 0.8rem;
    height: 5rem; 
}

button, .button{
    font-family: 'Poppins';
    font-weight: 500;
    /* line-height ==> Espaçamento entre as linhas do texto */
    line-height: 0;

    display: flex;
    /* Alinhar verticalmente e horizontalmente respectivamente */
    align-items: center;
    justify-content: center;

    background: var(--blue);
    color: var(--white);

    /* O cursor fica uma mãozinha quando em cima do botton */
    cursor: pointer;
}

button:hover, .button:hover{
    /* Aplica um brilho onde colocar o filtro, nesse caso, no botton. O brilho aparece quando passa o cursor em cima*/
    filter: brightness(1.2);
    /* Transição do brilho, demora 0.2s ou .2s (é a mesma coisa) */
    transition: filter .2s;
}

button > img,
.button > img{
    margin-right: 1rem;
    width: 2rem;
}

button.outlined,
.button.outlined{
    background: var(--white);
    color: var(--blue);
    border: .2rem solid var(--blue);
}

button.red,
.button.red{
    background: var(--red);
    color: var(--white);
}

button.grey,
.button.grey{
    background: var(--grey-light);
    color: var(--grey-dark);
}

/* HEADER */
.content header{
    width: 80%;
    margin: 3.5rem auto;
}

.content header img{
    width: 16.7rem;
}
